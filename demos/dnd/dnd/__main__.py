from requests import Session
from argparse import ArgumentParser
from urllib.parse import urljoin
from dnd.client import LLMChat


class bcolors:
    HEADER = '\033[95m'  #]
    BLUE = '\033[94m'  #]
    CYAN = '\033[96m'  #]
    GREEN = '\033[92m' #]
    OKBLUE = '\033[94m'  #]
    OKCYAN = '\033[96m'  #]
    OKGREEN = '\033[92m' #]
    WARNING = '\033[93m' #]
    FAIL = '\033[91m'   #]
    ENDC = '\033[0m'    #]
    BOLD = '\033[1m'    #]
    UNDERLINE = '\033[4m' #]


# Step 1: Define the Concept
# The application acts as a Game Master (GM) assistant for a Dungeons and Dragons campaign. It uses an LLM to take on the role of various NPCs and players, generating dialogue and decisions based on user input and campaign context.

# Step 2: System Design Overview
# - The user (GM) can interact with the system to control the campaign.
# - The application keeps track of the campaign state, including NPCs, encounters, and locations.
# - LLMs provide responses for NPCs, players, and event descriptions.
# - State management is crucial to ensure consistency.

# Step 3: Define Core Features
# 1. Campaign State Management
# 2. NPC and Player Dialogue Generation
# 3. Event and Encounter Description
# 4. Configurable NPC/Player Personalities
# 5. Multi-turn Conversation Handling

# Step 4: Initial Implementation - Campaign Engine
import json
from typing import List, Dict, Any


class CampaignEngine:
    def __init__(self, llm_client: Any):
        """Initialize the campaign engine.
        
        Args:
            llm_client: An instance of a client capable of sending messages to an LLM.
        """
        self.llm_client = llm_client
        self.state = {
            "players": {},  # Store player details
            "npcs": {},     # Store NPC details
            "history": []   # Store conversation history
        }

    def add_player(self, name: str, description: str, base_prompt: str | None = None):
        """Add a new player to the campaign."""
        self.state['players'][name] = {
            "description": description,
            "base_prompt": base_prompt,
            "history": []
        }

    def add_npc(self, name: str, description: str, base_prompt: str):
        """Add a new NPC to the campaign."""
        self.state['npcs'][name] = {
            "description": description,
            "base_prompt": base_prompt,
            "history": []
        }

    def generate_system_prompt(self, name: str, role: str) -> str:
        """Generate a dynamic system prompt for a player or NPC.
        
        Args:
            name: The name of the player or NPC.
            role: Either 'player' or 'npc'.
        
        Returns:
            A string containing the system prompt.
        """
        character = self.state[role + 's'].get(name)
        if not character:
            raise ValueError(f"{role.title()} '{name}' does not exist.")

        base_prompt = character.get("base_prompt", "")
        recent_history = "\n".join(
            [f"- {entry['role'].title()}: {entry['content']}" for entry in character['history'][-5:]]
        )

        return f"""
        {base_prompt}

        Recent Context:
        {recent_history}
        """

    def send_message(self, name: str, message: str, role: str = 'player') -> str:
        """Send a message as a player or NPC.
        
        Args:
            name: The name of the player or NPC.
            message: The message to send.
            role: Either 'player' or 'npc'.
        
        Returns:
            The response generated by the LLM.
        """
        if role not in ['player', 'npc']:
            raise ValueError("Role must be either 'player' or 'npc'")

        character = self.state[role + 's'].get(name)
        if not character:
            raise ValueError(f"{role.title()} '{name}' does not exist.")

        # Generate system prompt
        system_prompt = self.generate_system_prompt(name, role)

        # Update character history
        history = character['history']
        if len(history) > 0:
            history[-1]['response'] = system_prompt
        else:
            history.append({"role": "system", "content": system_prompt})
        history.append({"role": "user", "content": message})
        response, updated_history = self.llm_client.send_message(
            message, character['history']
        )
        character['history'] = updated_history

        # Update global history
        self.state['history'].append({"name": name, "role": role, "message": message, "response": response})
        self.state[role + 's'][name]['chat_history'] = updated_history
        return response

    def save_campaign(self, filename: str):
        """Save the campaign state to a file."""
        with open(filename, 'w') as file:
            json.dump(self.state, file, indent=2)

    def load_campaign(self, filename: str):
        """Load the campaign state from a file."""
        with open(filename, 'r') as file:
            self.state = json.load(file)

    def run_game_loop(self):
        """Run the interactive game loop for the user."""
        print("Welcome to the DnD Campaign Assistant!")
        while True:
            print("\nMenu:")
            print("1. Add Player")
            print("2. Add NPC")
            print("3. Interact")
            print("4. Save Campaign")
            print("5. Load Campaign")
            print("6. Exit")
            choice = input("Enter your choice: ")

            if choice == "1":
                name = input("Enter player name: ")
                description = input("Enter player description: ")
                self.add_player(name, description)
                print(f"Player '{name}' added.")

            elif choice == "2":
                name = input("Enter NPC name: ")
                description = input("Enter NPC description: ")
                base_prompt = input("Enter NPC base prompt: ")
                self.add_npc(name, description, base_prompt)
                print(f"NPC '{name}' added.")

            elif choice == "3":
                role = input("Interact as (player/npc): ").strip().lower()
                name = input(f"Enter the {role} name: ")
                message = input("Enter your message: ")
                try:
                    response = self.send_message(name, message, role)
                    print(f"Response: {response}")
                except ValueError as e:
                    print(e)

            elif choice == "4":
                filename = input("Enter filename to save the campaign: ")
                self.save_campaign(filename)
                print("Campaign saved.")

            elif choice == "5":
                filename = input("Enter filename to load the campaign: ")
                self.load_campaign(filename)
                print("Campaign loaded.")

            elif choice == "6":
                print("Exiting the game. Goodbye!")
                break

            else:
                print("Invalid choice. Please try again.")
# Step 5: Example Usage
if __name__ == "__main__":
    # Create an instance of the LLMChat (dummy example)
    llm_client = LLMChat("http://localhost:8001", model_name="Qwen")
    campaign = CampaignEngine(llm_client)

    # Add players and NPCs
    campaign.add_player(
        "Grimbgard",
        "Skilled ranger known for your bravery, sharp instincts, and protective nature.",
        base_prompt="""
You are Aragorn, a skilled ranger in a DnD campaign. You are known for your bravery, sharp instincts, and protective nature. 
Your role is to act as a scout, protector, and strategist for your group. Always think tactically and prioritize the safety of your companions.
Speak in a confident and humble tone, avoiding modern slang.

Example Dialogue:
User: "What do you see ahead, Aragorn?"
Aragorn: "The woods are quiet, but too quiet. I sense something amiss. We must tread carefully."

User: "Should we set up camp here?"
Aragorn: "This spot is defensible, but the open ground leaves us exposed to archers. We should find higher ground."
        """
    )
    campaign.add_npc(
        "Gandalf", 
        "A wise old wizard with immense power.",
        base_prompt="""
        You are Gandalf, a wise and powerful wizard in a DnD campaign. Your role is to guide adventurers with wisdom while challenging their courage and resolve. 
        You speak in a poetic, slightly cryptic tone, often using metaphors or references to ancient knowledge.

        Example Dialogue:
        User: \"What lies ahead, Gandalf?\"
        Gandalf: \"The path before us is shrouded in shadow, yet even the faintest light can pierce the deepest dark. We must press on.\"

        User: \"How do we defeat the enemy?\"
        Gandalf: \"Victory lies not in strength alone, but in unity and courage. Trust each other, and you shall prevail.\"
        """
    )

    campaign.run_game_loop()

    exit(0)
    # Interact
    prompt = input("Enter a prompt: ")
    response = campaign.send_message("Grimbgard", prompt, role="player")
    print(f"{bcolors.OKGREEN}Grimbgard: {response}{bcolors.ENDC}")

    response = campaign.send_message("Gandalf", response, role='npc')#"Beware, Grimbgard. The shadows are stirring.", role="npc")
    print(f"{bcolors.OKBLUE}Gandalf: {response}{bcolors.ENDC}")

    # Save and load state
    campaign.save_campaign("campaign_state.json")
